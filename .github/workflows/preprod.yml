name: Deploy Images to GHCR

on:
  push: 
    branches:
      - preprod
      - main
  pull_request: 
    types: [closed]
  workflow_dispatch: 

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  BUILD_DATE: $(date +'%d%m%Y')

jobs:
  push-store-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Extract PR Number
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "PR_NUMBER=${{ github.event.number }}" >> GITHUB_ENV
          else
            echo 'PR_NUMBER=0' >> $GITHUB_ENV
          fi

      - name: Generate Image Tag
        run: echo "IMAGE_TAG=${BUILD_DATE}-${PR_NUMBER}" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Convert repository name to lowercase
        id: repo_name
        run: echo "REPO_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print tolower($2)}')" >> $GITHUB_ENV

      # - name: Build and Push Docker Image
      #   run: |
      #     docker build --tag ghcr.io/karimdevwm/${{ env.REPO_NAME }}:${{ env.BUILD_NUMBER }} .
      #     docker push ghcr.io/karimdevwm/${{ env.REPO_NAME }}:${{ env.BUILD_NUMBER }}

      - name: Build docker image
        run: docker build -t $IMAGE_NAME:${{ env.IMAGE_TAG }} -t $IMAGE_NAME:latest .
      
      - name: Push docker image
        run: |
          docker push $IMAGE_NAME:${{ env.IMAGE_TAG }}
          docker push $IMAGE_NAME:latest

  deploy:
    needs: push-store-docker-image
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy using Ansible
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/ansible
            ansible-playbook deploy_microservices.yml --extra-vars "service_name=apigateway"

      # - name: Install SSH Key
      #   run: |
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
      #     chmod 600 ~/.ssh/id_rsa
      #     ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # - name: Retrieve NEW_BUILD_NUMBER from Repository Variables
      #   env:
      #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
      #   run: |
      #     NEW_BUILD_NUMBER=$(gh api \
      #       -H "Accept: application/vnd.github+json" \
      #       -H "Authorization: Bearer $GH_TOKEN" \
      #       /repos/${{ github.repository }}/actions/variables/NEW_BUILD_NUMBER | jq -r '.value')
      #     echo "NEW_BUILD_NUMBER=$NEW_BUILD_NUMBER" >> $GITHUB_ENV

      # - name: Debug SSH Connection
      #   run: ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo SSH Connection Successful"

      # - name: Update docker-compose.yml and Restart Services
      #   run: |
      #     ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
      #       cd ${{ secrets.WORK_DIR }}

      #       echo 'Updating docker-compose.yml with new image tag...'

      #       # Backup existing docker-compose.yml
      #       cp docker-compose.yml docker-compose.yml.bak

      #       NEW_BUILD_NUMBER='${{ env.NEW_BUILD_NUMBER }}'

      #         echo 'Repository Name:' \$REPO_NAME
      #         echo 'New Build Number:' \$NEW_BUILD_NUMBER

      #       # Replace the old image tag with the new one from repository variable
      #       sed -i "s|ghcr.io/karimdevwm/${{ env.REPO_NAME }}:[^ ]*|ghcr.io/karimdevwm/${{ env.REPO_NAME }}:${{ env.BUILD_NUMBER }}|" docker-compose.yml

      #       # Verify the change
      #         echo 'Updated docker-compose.yml:'
      #         grep 'ghcr.io/karimdevwm' docker-compose.yml

      #       # Restart services
      #       docker compose stop api-gateway
      #       docker compose rm -f api-gateway
      #       docker compose pull ghcr.io/karimdevwm/${{ env.REPO_NAME }}:${{ env.BUILD_NUMBER }}
      #       docker compose up -d api-gateway
      #     EOF

      # - name: Cleanup SSH Key
      #   run: sudo rm -rf ~/.ssh